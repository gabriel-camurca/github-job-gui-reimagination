{"ast":null,"code":"import { useReducer, useEffect } from 'react';\nimport axios from 'axios';\nexport default function getJobs(params, page) {\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(reducer, {\n    jobs: [],\n    loading: true\n  });\n  const BASE_URL = \"https://jobs.github.com/positions.json\";\n  useEffect(() => {\n    axios.get(BASE_URL, {\n      headers: {\n        'Access-Control-Allow-Origin': '*'\n      }\n    }).then(res => {\n      res.data;\n    }).catch(e => {\n      console.log(\"Error\");\n    });\n  }, [params, page]);\n  return state;\n}","map":{"version":3,"sources":["C:/Users/gabri/Documents/GitHub/github-job-gui-reimagination/src/getJobs.tsx"],"names":["useReducer","useEffect","axios","getJobs","params","page","state","dispatch","reducer","jobs","loading","BASE_URL","get","headers","then","res","data","catch","e","console","log"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,SAArB,QAAsC,OAAtC;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,eAAe,SAASC,OAAT,CAAiBC,MAAjB,EAAyBC,IAAzB,EAA+B;AAC1C,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBP,UAAU,CAACQ,OAAD,EAAU;AAAEC,IAAAA,IAAI,EAAE,EAAR;AAAYC,IAAAA,OAAO,EAAE;AAArB,GAAV,CAApC;AAEA,QAAMC,QAAQ,GAAG,wCAAjB;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACZC,IAAAA,KAAK,CAACU,GAAN,CAAUD,QAAV,EAAoB;AAChBE,MAAAA,OAAO,EAAE;AAAC,uCAA+B;AAAhC;AADO,KAApB,EAEGC,IAFH,CAEQC,GAAG,IAAI;AACXA,MAAAA,GAAG,CAACC,IAAJ;AACH,KAJD,EAIGC,KAJH,CAISC,CAAC,IAAI;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH,KAND;AAOH,GARQ,EAQN,CAAChB,MAAD,EAASC,IAAT,CARM,CAAT;AAUA,SAAOC,KAAP;AACH","sourcesContent":["import { useReducer, useEffect } from 'react'\r\n\r\nimport axios from 'axios'\r\n\r\n\r\nexport default function getJobs(params, page) {\r\n    const [state, dispatch] = useReducer(reducer, { jobs: [], loading: true})\r\n\r\n    const BASE_URL = \"https://jobs.github.com/positions.json\"\r\n\r\n    useEffect(() => {\r\n        axios.get(BASE_URL, {\r\n            headers: {'Access-Control-Allow-Origin': '*'}\r\n        }).then(res => {\r\n            res.data\r\n        }).catch(e => {\r\n            console.log(\"Error\")\r\n        })\r\n    }, [params, page])\r\n\r\n    return state\r\n}"]},"metadata":{},"sourceType":"module"}